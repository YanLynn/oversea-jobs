<?php

namespace App\services;
use App\User;
use DB;
use Illuminate\Support\Carbon;
use Auth;
use App\Model\Jobseeker;    
use App\Model\Recruiter;    
use App\Model\Country;   
use App\Model\SearchHistory;   
use App\Http\Controllers\API\V1\BaseController;
use App\Helpers\CustomLog; 
class PublicSearch {
     
    //generated by Su Sandy(17.7.2020 Fri) 
    //for Jobseeker search jobs (both public and login)
    // updated by Thuzar 10 Aug 2020
    public static function search($searchData,$request,$check,$isfav){


        $country_id = Country::select('id')->whereIn('country_name',$searchData->country)
                                           ->groupBy('country_name')
                                           ->get();

        $search_history_country_id = Country::select('id')->whereIn('country_name',$searchData->historyCountry)
                                            ->groupBy('country_name')
                                            ->get();

                            

        foreach($search_history_country_id as $id) 
        {
           $search_history = new  SearchHistory();
           $search_history->field_id = $id->id;
           $search_history->user_type = 'jobseeker';
           $search_history->table_type = 'country';
           $search_history->search_date = Carbon::now();
           $search_history->save();
         
        }


        $occupation_id = $searchData->occupation;
        $keyword = $searchData->keyword;
        $favJobList='';
       
    
        $query = DB::table('jobs')->join('recruiters','recruiters.id','=','jobs.recruiter_id')
        ->leftjoin('countries','countries.id','=','jobs.country_id');
                               

        if($country_id != null){
            if(count($country_id) != 0){
                $query->whereIn('jobs.country_id',$country_id);
            } 
        }
        
        if($occupation_id != null){
            if(count($occupation_id) != 0){
                $query->whereIn('jobs.occupation_id',$occupation_id);
            }
        }

        
        
       
        if($keyword != '' || $keyword != null)
        {
            $query->where(function ($q) use ($keyword)
            {
                
                $q->where('jobs.title','like','%'.$keyword.'%')->orWhere('jobs.occupation_description','like','%'.$keyword.'%')->orWhere('jobs.other_keywords','like','%'.$keyword.'%')
                  ->orWhere('jobs.employment_types','like','%'.$keyword.'%')->orWhere('jobs.job_description','like','%'.$keyword.'%')
                  ->orWhere('jobs.qualification','like','%'.$keyword.'%')->orWhere('jobs.job_location','like','%'.$keyword.'%')
                  ->orWhere('jobs.allowance','like','%'.$keyword.'%');
            });
        }

     
        // $twoWeekMinus = date('Y-m-d H:i:s', strtotime('-5 minutes',strtotime(Carbon::now())));
        // $currentDate = date('Y-m-d H:i:s', strtotime(Carbon::now()));

        $twoWeekMinus = date('Y-m-d', strtotime('-1 month',strtotime(Carbon::now())));
        $currentDate = date('Y-m-d', strtotime(Carbon::now()));

       
        $query->where('jobs.job_post_status','post')->where('jobs.record_status',1)->where('recruiters.record_status',1);

        $query->where(DB::raw("DATE_FORMAT(job_post_date, '%Y-%m-%d')"),">=",$twoWeekMinus);
        $query->where(DB::raw("DATE_FORMAT(job_post_date, '%Y-%m-%d')"),"<=",$currentDate);

        // $query->where(DB::raw("DATE_FORMAT(job_post_date, '%Y-%m-%d %h:%i:%s')"),">=",$twoWeekMinus);
        // $query->where(DB::raw("DATE_FORMAT(job_post_date, '%Y-%m-%d %h:%i:%s')"),"<=",$currentDate);
        
        //do only login jobseeker
        if(Auth::user())
        {
            $jobseekerId = BaseController::getLoginJobseekerID();
            $favJobId = Jobseeker::where('id',$jobseekerId)->select('favourite_job_ids')->value('favourite_job_ids');
            $favJobList = explode(',',$favJobId);
            $timezone = User::find(Auth::user()->id)->selectedTimeZone();
        }
        else{
            $timezone = "+09:00";
        }

        $query->select(DB::raw("convert_tz(jobs.job_post_date,'+00:00','$timezone') as job_post_date"),'recruiters.logo','jobs.title', 'jobs.occupation_description','jobs.job_description','jobs.id as job_id','countries.country_name','jobs.job_location','jobs.other_keywords');
        $query->addSelect(DB::raw("'' as fav,'' as job_expired_date"));
        
        //for iinfinite scroll and not scroll
        if($check == 'scroll')
        {
          
            if($isfav == 'addFav'){
        
                $page = $request['page'] * 10;
           
                $result = $query->orderby('jobs.job_post_date','desc')->take($page)->get();
            }
            else if($isfav == 'removefav')
            {
                $page = $request['page'] * 10;
           
                $result = $query->orderby('jobs.job_post_date','desc')->take($page)->get();
            }
            else{
                $result = $query->orderby('jobs.job_post_date','desc')->paginate(10);
            }
        }
        else if($check =='filter'){
          $result = $query->orderby('jobs.job_post_date','desc')->get();
          
        }             

      
        foreach($result as $res) 
        {
                $res->other_keywords = explode(",",$res->other_keywords);
                $res->job_post_date = explode(" ",$res->job_post_date)[0];
                $res->job_expired_date = explode(" ",$res->job_expired_date . ' + 1 month')[0];
                // $res->job_post_date = date('Y-m-d', strtotime($res->job_post_date));
                // $res->job_expired_date = date('Y-m-d', strtotime($res->job_post_date. ' + 1 month'));
                $res->logo_url = generate_image_link($res->logo, 'recruiters/images');    
                //do only login jobseeker and has favourite jobs
                if($favJobList) 
                {
                    foreach($favJobList as $fav)
                    {
                        if($fav == $res->job_id){
                            $res->fav = 'fav';
                        }
                    }
                }       
        }

    
       return $result;
        
    }

    //generated by waizin(07,14,2020) 
    //for recruiter search jobseekers (both public and login)
    public static function seekerSearch($searchData,$request,$check,$isfav){
       
        // $country_id = $searchData->country;
        $country_id = Country::select('id')->whereIn('country_name',$searchData->country)
                                            ->groupBy('country_name')
                                            ->get();

                                            // return $searchData->country;
        foreach($country_id as $id) 
        {
            $search_history = new  SearchHistory();
            $search_history->field_id = $id->id;
            $search_history->user_type = 'recruiter';
            $search_history->table_type = 'country';
            $search_history->search_date = Carbon::now();
            $search_history->save();            
        }

        $occupation_id = $searchData->occupation;
        $keyword = $searchData->keyword;
        $query = Jobseeker::select(DB::raw("'' as language_level,'' as desired_occupation,'' as fav"),'jobseekers.jobseeker_nick_name','jobseekers.id','jobseekers.jobseeker_number','jobseekers.face_image','jobseekers.face_image_private_status','ca.country_name as desired_location_1','cb.country_name as desired_location_2','cc.country_name as desired_location_3','jobseekers.created_at','jobseekers.desired_occupation_status');     
        $query ->leftjoin('countries as ca','ca.id','=','jobseekers.desired_location_1');
        $query ->leftjoin('countries as cb','cb.id','=','jobseekers.desired_location_2');
        $query ->leftjoin('countries as cc','cc.id','=','jobseekers.desired_location_3');
        $query ->leftjoin('jobseeker_languages','jobseekers.id','=','jobseeker_languages.jobseeker_id');
        $query ->leftjoin('languages','languages.id','=','jobseeker_languages.language_id');
        $query ->leftjoin('desired_occupations','jobseekers.id','=','desired_occupations.jobseeker_id');
        $query ->leftjoin('occupations','occupations.id','=','desired_occupations.occupation_id');
        $query ->leftjoin('desired_industries','desired_industries.jobseeker_id','=','jobseekers.id');
        $query ->leftjoin('industries','industries.id','=','desired_industries.industry_id');
        $query ->leftjoin('users', 'jobseekers.user_id','=','users.id');

        $language = Jobseeker::select(DB::raw("group_concat(languages.language_name,'|',IFNULL(jobseeker_languages.language_level, '')) as language_level"),'jobseekers.id')
                               ->leftJoin('jobseeker_languages','jobseeker_languages.jobseeker_id','=','jobseekers.id')
                               ->leftJoin('languages','languages.id','=','jobseeker_languages.language_id')
                               ->where('jobseekers.record_status',1)->where('jobseekers.scout_setting_status',1)
                               ->groupBy('jobseeker_languages.jobseeker_id')
                               ->orderBy('languages.id')
                               ->get(); 
      
        $occupation = Jobseeker::select(DB::raw("group_concat(occupations.occupation_name) as occupation_name"),"jobseekers.id")
                                ->leftjoin('desired_occupations','jobseekers.id','=','desired_occupations.jobseeker_id')
                                ->leftjoin('occupations','occupations.id','=','desired_occupations.occupation_id')
                                ->where('jobseekers.record_status',1)->where('jobseekers.scout_setting_status',1)
                                ->groupBy('desired_occupations.jobseeker_id')
                                ->orderBy('occupations.id')
                                ->get();                                 

        if(count($occupation_id) != 0){
            $query->WhereIn('desired_occupations.occupation_id',$occupation_id)
                  ->orWhere('jobseekers.desired_occupation_status',1);
        }
       
        if(count($country_id) != 0){
          
            $query->where(function($q) use($country_id){
                $q->whereIn('jobseekers.desired_location_1', $country_id)->orWhereIn('jobseekers.desired_location_2', $country_id)->orWhereIn('jobseekers.desired_location_3', $country_id);
            });
        } 
           
        if($keyword != '' || $keyword != null)
        {    
                                          
            $query->where(function ($q) use ($keyword)
            {
                $q->where('ca.country_name','like','%'.$keyword.'%')->orWhere('cb.country_name','like','%'.$keyword.'%')
                  ->orWhere('cc.country_name','like','%'.$keyword.'%')->orWhere('jobseekers.jobseeker_nick_name','like','%'.$keyword.'%')
                  ->orWhere('industries.industry_name','like','%'.$keyword.'%')->orWhere('languages.language_name','like','%'.$keyword.'%')
                  ->orWhere('jobseekers.self_pr','like','%'.$keyword.'%');
            });
        }
        $query->where('jobseekers.record_status',1 )->where('users.email_verified',1)->where('jobseekers.scout_setting_status',1); 
        if($check == 'scroll'){

            if($isfav == 'addFav'){
              
                $page = $request['page'] * 10;
           
                $result = $query->orderby('jobseekers.country_id','desc')->groupBy('jobseekers.id')->take($page)->get();
            }
            else if($isfav == 'removeFav')
            {
                $page = $request['page'] * 10;
           
                $result = $query->orderby('jobseekers.country_id','desc')->groupBy('jobseekers.id')->take($page)->get();
            }
            else{
                $result = $query->orderby('jobseekers.country_id','desc')->groupBy('jobseekers.id')->paginate(10);
            }
        }
        else{          
            
            $result = $query->orderby('jobseekers.country_id','desc')->groupBy('jobseekers.id')->get();  
        }      

        if(Auth::user())
        {
            $recruiterId = BaseController::getLoginRecruiterID();
            $favId = Recruiter::where('id',$recruiterId)->select('favourite_jobseeker_ids')->value('favourite_jobseeker_ids');
            $favList = explode(',',$favId);

            foreach($result as $res) 
            {
                if($favList) 
                {
                    foreach($favList as $fav)
                    {
                        if($fav == $res->id){
                            $res->fav = 'fav';
                        }
                    }
                }       
            }
        }     

        return response()->json(['result' => $result,'language'=>$language,'occupation'=>$occupation]);
    }
}