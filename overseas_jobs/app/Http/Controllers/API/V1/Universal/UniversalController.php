<?php

namespace App\Http\Controllers\API\V1\Universal;

use DB;
use Auth;
use App\User;
use Validator;
use Carbon\Carbon;
use App\Model\Jobseeker;
use App\Model\Country;
use App\Model\Recruiter;
use App\Model\UploadedFile;
use App\Model\SearchHistory;
use App\Mail\verifyEmail;
use App\Mail\AdminContentMail;
use App\Mail\SenderContentMail;
use App\services\PublicSearch;
use Illuminate\Http\Request;
use App\services\CustomCryption;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use App\Http\Controllers\API\V1\BaseController;
class UniversalController extends BaseController
{
    //generated by Su Sandy 
    //to bind data for country and occupation model box for jobseeker jobsearch (both public and login)
    public function getCountryAndOccupation($type) 
    {

        $to_date =  date('Y-m-d', strtotime(Carbon::now()));
        $from_date = date('Y-m-d', strtotime($to_date . ' -1 month'));

        $country_queries = "SELECT '' as completed,'' as checkcount,id,country_name,continent_name from countries group by country_name order by id asc";
        $country = DB::select($country_queries);

        $popular_country_queries = "SELECT '' as completed, search_histories.field_id,countries.country_name,countries.continent_name 
                                    from search_histories  join countries on countries.id = search_histories.field_id
                                    where table_type = 'country' and user_type = '$type' and search_date between '$from_date' and '$to_date'
                                    group by field_id  order by  count(field_id) desc limit 6";
        $popular_country = DB::select($popular_country_queries);

        $continent_name = "SELECT '' as completed,'' as checkcount,id,country_name,continent_name from countries group by continent_name";
        $continent = DB::select($continent_name);
     
        $occupation_query = "SELECT '' as completed,id,occupation_name from occupations";
        $occupation = DB::select($occupation_query);

        
        return response()->json(Array('country'=>$country,'popular_country'=>$popular_country,'occupation'=>$occupation,'continent'=>$continent));
    }    

    public function getData()
	{
		$recEloquent = DB::table('recruiters')->select('*');
		$data = $recEloquent->paginate(2);

		$data->getCollection()->transform(function ($model) {
			$model->logo_url = generate_image_link($model->logo, "recruiters/images");
			$model->incharge_photo_url = generate_image_link($model->incharge_photo, "recuiters/images");			
			return $model;
		}) ;

		return response()->json($data);
    }

    //generated by Su Sandy (17.7.2020 Fri)
    //to search jobs by jobseeker (both public and login)
    public function searchJob(Request $request,$check)
    {
        $searchData = $_GET["searchData"];
        $searchData = json_decode($searchData);
        $result = PublicSearch::search($searchData,$request,$check,null);
        return $this->createResponse($result,200);
    }
    
    //generated by waizin (27.7.2020)
    //to search jobseeker by recruiter (both public and login)
    public function searchSeeker(Request $request,$check)
    {
        $searchData = json_decode($_GET["searchData"]);
        $result = PublicSearch::seekerSearch($searchData,$request,$check,null);
        return $this->createResponse($result,200);
    }

    // Testing Blur Image
    public function testImageBlur(Request $request)
	{
		$jobseeker_id = $this->getLoginJobseekerID();
		$jobseeker = Jobseeker::findOrFail($jobseeker_id);

		if ($request->file('face_image') != null)
		{
			try {
				$face_image = $request->file('face_image');
				$filename = $jobseeker->jobseeker_number.'_'.'face_image';
				$actual_filename = $filename.'.'.$face_image->getClientOriginalExtension();
				$blur_filename = md5($filename).'.'.$face_image->getClientOriginalExtension();
                
                // base_path
				$blur_filepath = './uploads/jobseekers/images/'.$blur_filename;
				// --blur image must be saved first before moving uploaded file
				Image::make($face_image)->blur(50)->save($blur_filepath);
				put_file($face_image, $actual_filename, 'jobseekers/images');				
			} catch (\Exception $e) {
				throw $e;
			}			
		}
		return $this->createResponse([
			'image_filename' => $actual_filename,
			'blur_filename' => $blur_filename,
		]);
    }
    
    public function defaultImage() {
        return $this->createResponse(\generate_image_link('/images/default.png'));
    }
    


    //generated by Yan Lynn Aung
    //Change user Email
    public function checkPassword(Request $request)
    {
        $user = User::findOrFail(Auth::user()->id);
        $validator = \Validator::make($request->all(), [
            'password' => 'required',
        ]);


        if ($validator->fails())
        {
            return response(['error' => 'パスワードは必須です'],401);
        }
        if(Hash::check($request->password, $user->password)){
            return response(['success' => 'Password is match!'],200);
        }
        else{
            return response(['error' => 'パスワードが一致しません'],401);
        }
    }
     //generated by Yan Lynn Aung
    //Change user Email
    public function changeEmail(Request $request)
    {
       $validator = \Validator::make($request->all(), [
            'email' => 'required',
        ]);
        $roleURL = User::findOrFail(Auth::user()->id);
        if ($validator->fails())
        {
            return response(['error' => '新しいメールアドレスを入力してください'],403);
        }
        
        $alreadyExistEmail = User::where('email',$request->email)->where('role_id','=',$roleURL->role_id)->where('record_status','<>',3)->where('email_verified','=',1)->value('email');

        if ($alreadyExistEmail == $request->email)
        {
            return response(['error' => 'このメールアドレスは、既に使われています'],403);
        }
        
        $encryUserEmail = CustomCryption::cryption($request->email,'e');
        $userOldEmail = CustomCryption::cryption($roleURL->email,'e');
        $userID = CustomCryption::cryption($roleURL->id,'e');
        $currentDate =  date('Y/m/d', strtotime(Carbon::now()));
        $encryCrurrentDate = CustomCryption::cryption(date('Y/m/d', strtotime(Carbon::now())),'e');
        $expireDate = date('Y/m/d', strtotime($currentDate . ' +1 day'));
        if($roleURL->role_id == 2){
            $name = Recruiter::where('user_id',Auth::user()->id)->select('recruiter_name')->value('recruiter_name');
            $urlCreate = url('recruiter/update-email?token='.$encryUserEmail.'&key='.$encryCrurrentDate.'&oe='.$userOldEmail.'&_id='.$userID);
        }
        if($roleURL->role_id == 3){
            $jobseeker_furigana_name = Jobseeker::where('user_id',Auth::user()->id)->select('jobseeker_furigana_name')->value('jobseeker_furigana_name');
            $jobseeker_name = Jobseeker::where('user_id',Auth::user()->id)->select('jobseeker_name')->value('jobseeker_name');
            $name = $jobseeker_name."(".$jobseeker_furigana_name.")";
            $urlCreate = url('jobseeker/update-email?token='.$encryUserEmail.'&key='.$encryCrurrentDate.'&oe='.$userOldEmail.'&_id='.$userID);
        }

        $data = array(
            'name'=> $name,
            'old_email' => $roleURL->email,
            'new_email' =>$request->email,
            'url' =>$urlCreate,
            'today'=>$currentDate,
            'expireDate'=>$expireDate
        );
        Mail::to($request->email)->send(new verifyEmail($data));
        $user = User::findOrFail(Auth::user()->id);
        $user->remember_token = $encryCrurrentDate;
        $user->update();
        
        return response(['success' => '入力されたメールアドレス宛に確認用のメールを送付しました。'],200);
    }
     //generated by Yan Lynn Aung
    //Change user Email
    public function updateEmail(Request $request)
    {
        
        $URL_date = CustomCryption::cryption($request->key,'d');

        $oneTimeUseURL_E = CustomCryption::cryption('One-Time-Use','e');
        $userChangeEmail = CustomCryption::cryption($request->token,'d');
        $oldEmail = CustomCryption::cryption($request->oe,'d');
        $userID = CustomCryption::cryption($request->id,'d');

        $currentDate =  date('Y/m/d', strtotime(Carbon::now()));
        $user = User::where('id',$userID)->first();
        if(empty($user)){
         return response(['error' => 'User Not Found!'],404);
        }
        // if($currentDate > $URL_date || CustomCryption::cryption($user->remember_token,'d') == 'One-Time-Use'){
        //      return $this->tokenExpired();
        // }

        if($currentDate > $URL_date){
            return response()->json(['error'=> 'Token_Expired!','role' => $user->role_id],400);
        }
        if($user->email == $userChangeEmail){
            return response()->json(['success'=> 'email_changed','role' => $user->role_id],200);
         }
        if($user->role_id == 2){

           Recruiter::where('user_id', $user->id)->update(['email' => $userChangeEmail]);
        }
        if($user->role_id == 3){
           Jobseeker::where('user_id',$user->id)->update(['email'=>$userChangeEmail]);
        }
         $user->remember_token = $oneTimeUseURL_E;
         $user->email = $userChangeEmail;
         $user->update();
         return response()->json(['success'=> 'successfully change email','role'=> $user->role_id],200);

    }

    /**
     * @desc Jobseeker Profile before login
     * @author Chhuani @ 2020/08/06
     * @last_maintained Chhuani @ 2020/08/06
     * @param  int $jobseeker_id
     * @param  Request $request
     * @return json
     */
    public function getJobseekerProfile($jobseeker_id, Request $request) {
 

        $query = "SELECT ''as language_level, js.id, js.face_image, js.face_image_private_status,ca.country_name as desired_location_1,cb.country_name as desired_location_2,cc.country_name as desired_location_3,js.user_id,js.self_pr,js.jobseeker_nick_name,js.desired_occupation_status,
                    group_concat(distinct(o.occupation_name)) as occupation
                    FROM jobseekers js 
                    LEFT JOIN countries as ca on ca.id = js.desired_location_1
                    LEFT JOIN countries as cb on cb.id = js.desired_location_2
                    LEFT JOIN countries as cc on cc.id = js.desired_location_3
                    LEFT JOIN desired_occupations desir_oc on desir_oc.jobseeker_id = js.id
                    LEFT JOIN occupations o on o.id = desir_oc.occupation_id
                    WHERE js.id = $jobseeker_id
                    GROUP BY js.id";

        $language = Jobseeker::select(DB::raw("group_concat(languages.language_name,'|',IFNULL(jobseeker_languages.language_level, '')) as language_level"),'jobseekers.id')
                    ->leftJoin('jobseeker_languages','jobseeker_languages.jobseeker_id','=','jobseekers.id')
                    ->leftJoin('languages','languages.id','=','jobseeker_languages.language_id')
                    ->where('jobseekers.id',$jobseeker_id)
                    ->groupBy('jobseeker_languages.jobseeker_id')
                    ->get(); 

        $jobseeker_profile = DB::select($query);
        $user = auth()->user();
        $getLoignRecuriter = Recruiter::where('user_id', $user ? $user->id : 0)->value('id');
        if (!$getLoignRecuriter) {
           
            if($jobseeker_profile[0]->face_image != NULL){
                $exploded = explode(".", $jobseeker_profile[0]->face_image);
                $blurred_name = md5($exploded[0]).".".($exploded[1]);
                $jobseeker_profile[0]->face_image = $blurred_name;
            }
            else{
                $blurred_name = generate_image_link($jobseeker_profile[0]->face_image, "jobseekers/images");
            }
        }
        $jobseeker_profile[0]->face_image = generate_image_link($jobseeker_profile[0]->face_image, "jobseekers/images");
        $related_images = UploadedFile::jobseekerImage()
                        ->where('related_user_id', $jobseeker_profile[0]->id)
                        ->get();
        return $this->createResponse(array('jobseeker_profile'=>$jobseeker_profile,'related_images'=>$related_images,
                                            'language'=>$language),200);
	}


    public function createContent(Request $request)
    {
        $request['subject'] = "【ボーダレスワーキング】お問い合わせがありました";
        $contact_mail = config('config.contact_mail');
        Mail::to($contact_mail)->send(new AdminContentMail($request));
        $request['subject'] = "【ボーダレスワーキング】お問い合わせを受け付けました";
        Mail::to($request->email)->send(new SenderContentMail($request));
    }

    public function popularJob($job_id)
    {
        if(Auth::user())
        {
           
            $jobseekerId = BaseController::getLoginJobseekerID();
            $jobseeker = Jobseeker::findorfail($jobseekerId); 
            $id_list = explode(",",$jobseeker->recently_job_ids );

            if(!in_array($job_id, $id_list)) {
                array_unshift($id_list, $job_id);
            }

            if(sizeof($id_list) > 6){
              $id_list =  array_slice($id_list,0,6);
            }

            $jobseeker->recently_job_ids  = implode(',',$id_list);
            $jobseeker->update();

           
        }

        return 'success';

    }

    public function getCurrentTax()
	{
		$tax = DB::table('taxes')->where('current', true)->first();
		if (!$tax) {
			return $this->createErrorResponse('No taxes found.', 404);
		}
		return $this->createResponse($tax);
	}

	/**
	 * @desc Get currently logged in jobseeker or recruiter
	 * @author Myo Ko Ko @ 2020/10/23
	 * @last_maintained Myo Ko Ko @ 2020/10/23
	 * @param  null
	 * @return application/json
	 */
	public function getCurrentUser()
	{
		$data = null;
		$user = auth()->user();
		if (!$user) {
			return $this->createErrorResponse('Authentication failed.', 401);
		}
		
		if ($user->role_id == 1) {
			$data = $user;
		} elseif ($user->role_id == 2) {
			$data = Recruiter::where('user_id', $user->id)->firstOrFail();
		} else {
			$data = Jobseeker::where('user_id', $user->id)->firstOrFail();
		}
		$data->extra = $user->extra ? json_decode($user->extra) : [];
		return $this->createResponse($data);
    }

    public function getBlockUser($request)
	{
		$get_data = \explode(',',$request);
		if($get_data[1] == 'jobseeker'){
			$jobseeker = Jobseeker::join('users','users.id','=','jobseekers.user_id')
								  ->select('users.*')
								  ->where('jobseekers.id',$get_data[0])
								  ->first();
			if($jobseeker){
				 if($jobseeker->record_status != 1){
					 return response()->json(['status' => $jobseeker->record_status, 'user_data' => $jobseeker,'user_type' => 'jobseeker']);
				 }
			}
		}else{
			$recruiters = Recruiter::join('users','users.id','=','recruiters.user_id')
								  ->select('users.*')
								  ->where('recruiters.id',$get_data[0])
								  ->first();
			if($recruiters){
				 if($recruiters->record_status != 1){
					 return response()->json(['status' => $recruiters->record_status, 'user_data' => $recruiters,'user_type' => 'recruiter']);
				 }
			}
		}
    }
    
}
