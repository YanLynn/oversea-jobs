<?php

namespace App\Http\Controllers\API\V1\Jobseeker;

use App\Http\Controllers\API\V1\BaseController;
use Illuminate\Http\Request;
use App\services\PublicSearch;
use App\User;
use App\Model\Jobseeker;
use App\Model\JobApply;
use App\services\JobDetails;
// use App\services\Job;
use App\Model\Scout;
use DB;
use App\Helpers\CustomLog;
use Carbon\Carbon;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Validator;
use App\Mail\RecruiterRegisterMail;
use Auth;


class JobseekerJobController extends BaseController
{
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [            
			'email' => 'unique:users,email',
        ]);
        if ($validator->fails()) {
            $errors = $validator->errors()->all();
            return $this->createErrorResponse($errors, 422);
        }

        $activation_link = '';
        DB::beginTransaction();
        try {

            $user = new User;
            $job = new Jobseeker;

            $user->name = $request->input('name');
            $user->email = $request->input('email');
            $user->role_id = 3;
            $user->email_verified = false;
            $user->password = bcrypt($request->input('password'));
            $user->save();

            $job->user_id = $user->id;
            $job->jobseeker_name = $request->input('name');
            $job->jobseeker_furigana_name = $request->input('jobseeker_furigana_name');
            $job->dob = $request->input('dob');
            $job->address = $request->input('address');
            $job->phone = $request->input('phone');
            $job->email = $request->input('email');
           
            $job->save();


            DB::commit();
        } catch (\Exception $e) {            
            DB::rollback();
            return $this->createErrorResponse($e->getMessage(), 500);
        }

        return $this->createResponse($activation_link,201);
    }

    //generated by Su Sandy (17.7.2020 Fri)
    //to add favourite jobs  (only login jobseeker)
    public function addJobFav($jobId)
    {
		
        $jobseekerId = $this->getLoginJobseekerID();        
        // $type = $_GET["type"];
        $favId = Jobseeker::where('id',$jobseekerId)->select('favourite_job_ids')->value('favourite_job_ids');
        if($favId){
            $favId = $favId.",".$jobId;
        } else{
            $favId = $jobId;
        }
        $jobseeker = Jobseeker::where('id',$jobseekerId)->update(['favourite_job_ids'=> $favId]);   
        CustomLog::info("jobseeker add job fav".$jobId);  
        return $jobseeker;
        // if($type == 'details')
        // {   
        //     $selectedJobId = $_GET["selectedJobId"];       
        //     $result = JobDetails::Details($request,'addFav',$selectedJobId);
        //     return $this->createResponse($result,200);
        // }
        // else{
        //     $searchData = $_GET["searchData"];
        //     $searchData = json_decode($searchData);
        //     $result = PublicSearch::search($searchData,$request,$check,'addFav');
        //     return $this->createResponse($result,200);

        // } 
        
    }

    public function jobAppliedRemove(Request $request,$jobid){
        $id = $this->getLoginJobseekerID();

        try {

            return $jobid;


            DB::commit();
        } catch (\Exception $e) {            
            DB::rollback();
            return $this->createErrorResponse($e->getMessage(), 500);
        }
    }
    
    //generated by Su Sandy (17.7.2020 Fri)
    //to remove favourite jobs (only login jobseeker)
    public function removeJobFav($jobId)
    {
      
        $jobseekerId = $this->getLoginJobseekerID();        
        // $type = $_GET["type"];

        $favId = Jobseeker::where('id',$jobseekerId)->select('favourite_job_ids')->value('favourite_job_ids');
        $favId = explode(',',$favId);

        foreach (array_keys($favId, $jobId) as $key) {
            unset($favId[$key]);
        }

        $favId = implode(',',$favId);
        $jobseeker = Jobseeker::where('id',$jobseekerId)->update(['favourite_job_ids'=> $favId]);  
        CustomLog::info("jobseeker remove job fav".$jobId);
        return $jobseeker;
 
        // if($type == 'details')
        // {
        //     $selectedJobId = $_GET["selectedJobId"];
        //     $result = JobDetails::Details($request,'removeFav',$selectedJobId);
        //     return $this->createResponse($result,200);
        // }
        // else{
        //     $searchData = $_GET["searchData"];
        //     $searchData = json_decode($searchData);
        //     $result = PublicSearch::search($searchData,$request,$check,'removefav');
        //     return $this->createResponse($result,200);

        // }
        

	}

}
